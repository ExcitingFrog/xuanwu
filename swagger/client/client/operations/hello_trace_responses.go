// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ExcitingFrog/xuanwu/swagger/client/models"
)

// HelloTraceReader is a Reader for the HelloTrace structure.
type HelloTraceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HelloTraceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewHelloTraceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewHelloTraceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewHelloTraceOK creates a HelloTraceOK with default headers values
func NewHelloTraceOK() *HelloTraceOK {
	return &HelloTraceOK{}
}

/*
HelloTraceOK describes a response with status code 200, with default header values.

Hello
*/
type HelloTraceOK struct {
	Payload string
}

// IsSuccess returns true when this hello trace o k response has a 2xx status code
func (o *HelloTraceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this hello trace o k response has a 3xx status code
func (o *HelloTraceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this hello trace o k response has a 4xx status code
func (o *HelloTraceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this hello trace o k response has a 5xx status code
func (o *HelloTraceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this hello trace o k response a status code equal to that given
func (o *HelloTraceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the hello trace o k response
func (o *HelloTraceOK) Code() int {
	return 200
}

func (o *HelloTraceOK) Error() string {
	return fmt.Sprintf("[GET /hello/trace][%d] helloTraceOK  %+v", 200, o.Payload)
}

func (o *HelloTraceOK) String() string {
	return fmt.Sprintf("[GET /hello/trace][%d] helloTraceOK  %+v", 200, o.Payload)
}

func (o *HelloTraceOK) GetPayload() string {
	return o.Payload
}

func (o *HelloTraceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHelloTraceBadRequest creates a HelloTraceBadRequest with default headers values
func NewHelloTraceBadRequest() *HelloTraceBadRequest {
	return &HelloTraceBadRequest{}
}

/*
HelloTraceBadRequest describes a response with status code 400, with default header values.

BadRequest
*/
type HelloTraceBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this hello trace bad request response has a 2xx status code
func (o *HelloTraceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this hello trace bad request response has a 3xx status code
func (o *HelloTraceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this hello trace bad request response has a 4xx status code
func (o *HelloTraceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this hello trace bad request response has a 5xx status code
func (o *HelloTraceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this hello trace bad request response a status code equal to that given
func (o *HelloTraceBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the hello trace bad request response
func (o *HelloTraceBadRequest) Code() int {
	return 400
}

func (o *HelloTraceBadRequest) Error() string {
	return fmt.Sprintf("[GET /hello/trace][%d] helloTraceBadRequest  %+v", 400, o.Payload)
}

func (o *HelloTraceBadRequest) String() string {
	return fmt.Sprintf("[GET /hello/trace][%d] helloTraceBadRequest  %+v", 400, o.Payload)
}

func (o *HelloTraceBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *HelloTraceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
